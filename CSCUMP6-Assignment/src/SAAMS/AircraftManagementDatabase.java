package SAAMS;


// Generated by Together


import java.util.Observable;

//-----------------------|classAircraftManagementDatabase|--------------------\\
public class AircraftManagementDatabase extends Observable {


    
    //---------------------------(Constructor)------------------------------\\
    public AircraftManagementDatabase() {
        MRs = new ManagementRecord[maxMRs];
    }

  
    public String getStatus(int mCode) {
        return MRs[mCode].getStatus(MRs[mCode].getStatus());
    }


    private ManagementRecord[] MRs;

    public int maxMRs = 10; //size of the arr

    public void setStatus(int mCode, int newStatus) {
        MRs[mCode].setStatus(newStatus); // the status will assign to the MR
        setChanged();
        notifyObservers();
    } 


    public String getFlightCode(int mCode) {
        return MRs[mCode].getFlightCode(); // will the floight code of the flights
    } 

    //call via the interface screens
    public int[] getWithStatus(int statusCode) throws NullPointerException {
        int[] mCodesStatus = new int[maxMRs];
        int counter = 1;
        for (int i = 0; i < maxMRs; i++) {
            if (MRs[i].getStatus() == statusCode) {
                mCodesStatus[counter] = i;
                counter++;
            }
        }
        return mCodesStatus; //return the MR with status
    }

  
    
    public ManagementRecord getMR(int recordIdentifier) {
        return MRs[recordIdentifier]; //will returen the MR
    } 


    
    public void radarDetect(FlightDescriptor fd) { // if the radar detected flights
        int freeMR = 0;
        for (int i = 0; i < MRs.length; i++) {
            if (MRs[i] == null) {
                freeMR = i;
                break;
            }
        }
        MRs[freeMR] = new ManagementRecord();
        MRs[freeMR].setStatus(0);
        MRs[freeMR].radarDetect(fd);
        setChanged();
        notifyObservers();
    } 

  
    public void radarLostContact(int mCode) { //floghts in the MR has departed 
        MRs[mCode] = null;
        setChanged();
        notifyObservers();
    } 

    
    public void taxiTo(int mCode, int gateNumber) {// unloading passengers.
        MRs[mCode].taxiTo(gateNumber);
        setChanged();
        notifyObservers();
    }

  
    public int getGateNumber(int mCode) {
        return MRs[mCode].getGateNumber(); // will returen the gate number to MR
    } 

 
    public void faultsFound(int mCode, String description) { //The msg is send to MR for updatethe status
        MRs[mCode].faultsFound(description);
        setChanged();
        notifyObservers();
    } 

    //send the msg to MR for record passenger in the list.
    public void addPassenger(int mCode, PassengerDetails details) {
        MRs[mCode].addPassenger(details);
        setChanged();
        notifyObservers();
    }

    //Return the passengers u added with mCode.
    public PassengerList getPassengerList(int mCode) {
        return MRs[mCode].getPassengerList();
    }

    
    public Itinerary getItinerary(int mCode) {
        return MRs[mCode].getItinerary();
    }
 
 public void Notify() {
       setChanged();
        notifyObservers();
    }

} 
