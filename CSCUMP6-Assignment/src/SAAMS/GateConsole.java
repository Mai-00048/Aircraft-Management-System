package SAAMS;

import java.awt.BorderLayout;
import java.awt.Color;
import static java.awt.Color.gray;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;


// Generated by Together


/**
 * An interface to SAAMS:
 * Gate Control Console:
 * Inputs events from gate staff, and displays aircraft and gate information.
 * This class is a controller for the GateInfoDatabase and the AircraftManagementDatabase: sends messages when aircraft dock, have finished disembarking, and are fully emarked and ready to depart.
 * This class also registers as an observer of the GateInfoDatabase and the
 * AircraftManagementDatabase, and is notified whenever any change occurs in those <<model>> elements.
 * See written documentation.
 * @stereotype boundary/view/controller
 * @url element://model:project::SAAMS/design:view:::id1un8dcko4qme4cko4sw27
 * @url element://model:project::SAAMS/design:view:::id1jkohcko4qme4cko4svww
 * @url element://model:project::SAAMS/design:node:::id1un8dcko4qme4cko4sw27.node61
 */
public class GateConsole extends JFrame implements Observer, ActionListener {
  private int gateNumber;
  GateInfoDatabase GID;  
  private AircraftManagementDatabase AD;
  GateInfoDatabase lnkUnnamed;
  private int managementRecordIndex = -1;
  private ManagementRecord assignedMR;

    //declared buttons
    JButton buttonPlaneDocked; 
    JButton buttonPlaneDiesmbarked;  
    JButton buttonFlitRdyToDep;
    JButton buttonAddPassenger;    
    
    //declared JLabel
    JLabel JlabelGateStatus;
    JLabel jlabelPlaneStatus;
    JLabel jlabelFlitCode;
    JLabel jlabelFlitFrom;
    JLabel jlabelFlitTo;
    JLabel jlabelNextStop;
    JLabel jlabelNoPassenger;
    JLabel jlabelPassengerNum;
    
    //declared JList
    private JList list;
    DefaultListModel model = new DefaultListModel();
    
    //declared JTextField
    JTextField jtextfieldGateStatus;
    JTextField jtextfieldPlaneStatus;
    JTextField jtextfieldFlitCode;  
    JTextField jtextfieldFlitFrom;
    JTextField jtextfieldFlitTo;
    JTextField jtextfieldNextStop;
    JTextField jtextfieldNoPassenger;
    JTextField jtextfieldPassengerNum;
    
     public GateConsole(AircraftManagementDatabase aircraftManagementDatabase, GateInfoDatabase gateInfoDatabase,int gateno) {
        this.GID = gateInfoDatabase;
        this.AD = aircraftManagementDatabase;
        gateNumber =gateno; //to make 2 gui's
        AD.addObserver(this);
        JPanel panl = new JPanel(new BorderLayout());
          
        setTitle("Gate "+gateno);
        setLocation(100, 300);
        Container window = getContentPane();        
         
        TitledBorder border = new TitledBorder("Gate "+gateno); //<-- border for gui
        border.setTitleJustification(TitledBorder.CENTER);
        border.setTitlePosition(TitledBorder.TOP);
          
        panl.setLayout(new BoxLayout(panl,BoxLayout.X_AXIS));
        panl.setBorder(border);
          
        //left panel
        JPanel JpanelLeft = new JPanel(); 
        JpanelLeft.setLayout(new FlowLayout(FlowLayout.LEFT));
        JpanelLeft.setPreferredSize(new Dimension(50,200)); //set the size of left panel
          
        //right panel
        JPanel JpaneRight = new JPanel(); 
        JpaneRight.setLayout(new FlowLayout(FlowLayout.RIGHT));
        JpaneRight.setPreferredSize(new Dimension(67,97)); // set the size of the right panel
          
        TitledBorder border2 = new TitledBorder("");//<-- border for JList one
        border2.setTitleColor(Color.BLACK);
          
        //border line left screen
        JpanelLeft.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "", TitledBorder.LEFT, TitledBorder.TOP));         
                    
        //border line left screen
        JpaneRight.setBorder(BorderFactory.createTitledBorder(
        BorderFactory.createEtchedBorder(), "", TitledBorder.LEFT, TitledBorder.TOP));
          
          //create label
          JlabelGateStatus = new JLabel("Gate Status:        ");
          JpanelLeft.add(JlabelGateStatus); 
 
          jtextfieldGateStatus = new JTextField (8); //size of JTexiField
          jtextfieldGateStatus.setEnabled(false); //JTexiField disabel to select by user
          JpanelLeft.add(jtextfieldGateStatus); //location of JTexiField
          jtextfieldGateStatus.setBackground(gray); //color of JTexiField
          
          jlabelPlaneStatus = new JLabel("Plane Status:       "); //lavel name
          JpanelLeft.add(jlabelPlaneStatus);
          jtextfieldPlaneStatus = new JTextField (8);
          jtextfieldPlaneStatus.setEnabled(false);
          JpanelLeft.add(jtextfieldPlaneStatus);
          jtextfieldPlaneStatus.setBackground(gray);
          
          jlabelFlitCode = new JLabel("Flight Code:         ");
          JpanelLeft.add(jlabelFlitCode);
          jtextfieldFlitCode = new JTextField (8);
          jtextfieldFlitCode.setEnabled(false);
          JpanelLeft.add(jtextfieldFlitCode);
          jtextfieldFlitCode.setBackground(gray);
          
          jlabelFlitFrom = new JLabel("Flight From:         ");
          JpanelLeft.add(jlabelFlitFrom);
          jtextfieldFlitFrom = new JTextField (8);
          jtextfieldFlitFrom.setEnabled(false);
          JpanelLeft.add(jtextfieldFlitFrom);
          jtextfieldFlitFrom.setBackground(gray);
           
          jlabelFlitTo = new JLabel("Flight To:             ");
          JpanelLeft.add(jlabelFlitTo);
          jtextfieldFlitTo = new JTextField (8);
          jtextfieldFlitTo.setEnabled(false);
          JpanelLeft.add(jtextfieldFlitTo);
          jtextfieldFlitTo.setBackground(gray);
          
          jlabelNextStop = new JLabel("Next Stop:            ");
          JpanelLeft.add(jlabelNextStop);
          jtextfieldNextStop = new JTextField (8);
          jtextfieldNextStop.setEnabled(false);
          JpanelLeft.add(jtextfieldNextStop);
          jtextfieldNextStop.setBackground(gray);
          
          jlabelNoPassenger = new JLabel("passenger No:     ");
          JpanelLeft.add(jlabelNoPassenger);
          jtextfieldNoPassenger = new JTextField (8);
          jtextfieldNoPassenger.setEnabled(false);
          JpanelLeft.add(jtextfieldNoPassenger);
          jtextfieldNoPassenger.setBackground(gray);
          
          jlabelPassengerNum = new JLabel("passenger name:");
          JpanelLeft.add(jlabelPassengerNum);         
          jtextfieldPassengerNum = new JTextField (8);
          JpanelLeft.add(jtextfieldPassengerNum);
          
          
        //------------------------|Buttons|-----------------------------\\
          
         buttonPlaneDocked= new JButton("Plane Docked         ");
         JpanelLeft.add(buttonPlaneDocked);
         buttonPlaneDocked.addActionListener(this);
         buttonPlaneDocked.setPreferredSize(new Dimension(188,26)); //size
         
         buttonPlaneDiesmbarked= new JButton("Passenger Diesmbarked      ");
         JpanelLeft.add(buttonPlaneDiesmbarked);
         buttonPlaneDiesmbarked.addActionListener(this);
         buttonPlaneDiesmbarked.setPreferredSize(new Dimension(188,26));
         
         buttonFlitRdyToDep= new JButton("Flight Ready To Deport       ");
         JpanelLeft.add(buttonFlitRdyToDep);
         buttonFlitRdyToDep.addActionListener(this);
         buttonFlitRdyToDep.setPreferredSize(new Dimension(188,26));
         
         buttonAddPassenger= new JButton("Add passenger         ");
         JpanelLeft.add(buttonAddPassenger);
         buttonAddPassenger.addActionListener(this);
         buttonAddPassenger.setPreferredSize(new Dimension(188,26));
                  
         //---------------------|JList|--------------------------------------\\
                
          //List number one
          list = new JList<>(model);      
          list.setBounds(90,90, 75,75);
          JpaneRight.add(list);        
          list.setPreferredSize(new Dimension(205, 320));
          list.setBorder(border2);
          list.addListSelectionListener(evt -> itemSelected()); //to show the details by select the index
           
         setSize(450,395); //size of gui
         panl.add(JpanelLeft);
         panl.add(JpaneRight);
         window.add(panl);
         setVisible(true);
         JpanelLeft.setBackground(gray.brighter()); //color for thr left panel
         JpaneRight.setBackground(gray.brighter()); //color for thr right panel        
     }

    @Override
    public void update(Observable o, Object arg) { //observer for this mrethods:
         
        updateGates();
        updateRecords();
    }
    
        //---------------------|ActionPerformed|-----------------------------\\
    @Override
    public void actionPerformed(ActionEvent e) {
  
               if( e.getSource() == buttonAddPassenger) { //READY_PASSENGERS
                   
                  PassengerDetails passengerName = new PassengerDetails(jtextfieldPassengerNum.getText());
                  AD.addPassenger(managementRecordIndex,passengerName );
                  AD.setStatus(managementRecordIndex, 14); 
                  jtextfieldPassengerNum.setText("");
           }
           {
            if( e.getSource() == buttonPlaneDiesmbarked) { //added READY_CLEAN_AND_MAINT in this btn
               managementRecordIndex = GID.assignedmCode(gateNumber); 
               AD.setStatus(managementRecordIndex, 8); 
               AD.getPassengerList(managementRecordIndex).ClearPassenger();
               updateGates();                      
  }
  
            if( e.getSource() == buttonPlaneDocked) { //added the UNLOADING status to this btn
               managementRecordIndex = GID.assignedmCode(gateNumber); 
               AD.setStatus(managementRecordIndex, 7); 
               GID.docked(gateNumber);              
                updateGates(); 
                
  }
                   
            if( e.getSource() == buttonFlitRdyToDep) { //added the READY_DEPART status in this btn
               managementRecordIndex = GID.assignedmCode(gateNumber); 
               AD.setStatus(managementRecordIndex, 15); 
  }
                                 
            if( e.getSource() == buttonAddPassenger) {     //to add passenger         
                updateGates();
  }
           
           
  }
  
    }
    
    public void updateGates() {                
           Gate gt =new Gate();
           int firstGateStatus = GID.getStatus(0);          
           jtextfieldGateStatus.setText( GID.statusOfGate(firstGateStatus)); //set gate stsus
              
    }
 
            //for JList update records
    private void updateRecords() {
        
        if (GID.getStatus(gateNumber) != 0) {
            managementRecordIndex = GID.assignedmCode(gateNumber); 
            assignedMR = AD.getMR(managementRecordIndex); //get flight code 
        } 
            model.setSize(AD.maxMRs);
            for (int i = 0; i < AD.maxMRs; i++) {
            ManagementRecord MR = AD.getMR(i);

            if (MR == null) {
                model.set(i, null);
            } else if (MR == assignedMR) {
                model.set(i, MR.getFlightCode()+"--->"+MR.getStatus(MR.getStatus()));
            } 
        } 
    }

    //method for select flight index in JList and will show all details about it
    private void itemSelected() {
        
        managementRecordIndex = list.getSelectedIndex();
        ManagementRecord record = AD.getMR(managementRecordIndex);
        String PlaneStatus = record.getStatus(record.getStatus());
        String PlaneCode = record.getFlightCode();
        String PlaneFrom = record.getItinerary().getFrom();
        String PlaneTo = record.getItinerary().getTo();
        String PlaneStop = record.getItinerary().getNext();
        int NoPassngr = record.getPassengerList().getNumberOfAllPassengers();
        jtextfieldPlaneStatus.setText(PlaneStatus);
        jtextfieldFlitCode.setText(PlaneCode);
        jtextfieldFlitFrom.setText(PlaneFrom);
        jtextfieldFlitTo.setText(PlaneTo);
        jtextfieldNextStop.setText(PlaneStop);
        jtextfieldNoPassenger.setText(NoPassngr+"");
        
    }
 
}
